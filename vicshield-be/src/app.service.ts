import { Injectable, BadRequestException, Logger } from '@nestjs/common';
import OpenAI from 'openai';
import * as fs from 'fs';
import * as path from 'path';
// üëá import helper ƒë·ªÉ g·∫Øn filename/mime
import { toFile } from 'openai/uploads';

@Injectable()
export class AppService {
  private readonly logger = new Logger(AppService.name);

  private client = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });

  /**
   * Upload file local path -> OpenAI, purpose: 'assistants'
   * Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng file ƒë√£ upload.
   * Quan tr·ªçng: lu√¥n truy·ªÅn filename/mimeType ƒë·ªÉ OpenAI nh·∫≠n di·ªán lo·∫°i file.
   */
  async uploadToOpenAI(
    localPath: string,
    originalName: string,
    mimeType?: string,
  ) {
    // B·∫Øt bu·ªôc PDF cho context stuffing qua input_file
    const isPdf =
      (mimeType && mimeType.includes('pdf')) ||
      originalName.toLowerCase().endsWith('.pdf');

    if (!isPdf) {
      throw new BadRequestException(
        'Vui l√≤ng upload file PDF (.pdf). Hi·ªán t·∫°i context stuffing qua input_file ch·ªâ h·ªó tr·ª£ PDF.',
      );
    }

    const file = await this.client.files.create({
      // üëá G·∫Øn filename v√† mimeType chu·∫©n, tr√°nh "got none"
      file: await toFile(fs.createReadStream(localPath), originalName, {
        // @ts-ignore
        mimeType: mimeType ?? 'application/pdf',
      }),
      purpose: 'assistants',
    });

    return {
      id: file.id,
      bytes: file.bytes,
      created_at: file.created_at,
      filename: originalName,
      mime_type: mimeType ?? 'application/pdf',
    };
  }

  /**
   * Ph√¢n t√≠ch h·ª£p ƒë·ªìng ƒë√£ upload (qua fileId).
   * Y√™u c·∫ßu model tr·∫£ v·ªÅ JSON thu·∫ßn.
   */
  async analyzeUploadedContract(fileId: string, originalName?: string) {
    const prompt = [
      'B·∫°n l√† m·ªôt lu·∫≠t s∆∞ h·ª£p ƒë·ªìng th∆∞∆°ng m·∫°i. Nhi·ªám v·ª•:',
      '- ƒê·ªçc file h·ª£p ƒë·ªìng PDF ƒë√≠nh k√®m.',
      '- Ph√¢n t√≠ch ng·∫Øn g·ªçn, trung l·∫≠p.',
      '- Ch·ªâ tr·∫£ v·ªÅ DUY NH·∫§T m·ªôt JSON object theo schema, kh√¥ng k√®m markdown.',
      '',
      'Schema JSON:',
      JSON.stringify(
        {
          title: 'string',
          summary: 'string',
          parties: { A: 'string', B: 'string' },
          governingLaw: 'string?',
          effectiveDate: 'string?',
          term: 'string?',
          paymentTerms: 'string?',
          obligationsA: ['string'],
          obligationsB: ['string'],
          risksA: ['string'],
          risksB: ['string'],
          keyClauses: ['string'],
          missingClauses: ['string'],
          termination: 'string?',
          confidentiality: 'string?',
          disputeResolution: 'string?',
          safetyScoreA: 0,
          safetyScoreB: 0,
          redFlags: ['string'],
          recommendations: ['string'],
        },
        null,
        0,
      ),
      'L∆∞u √Ω: safetyScoreA/B t·ª´ 0-100. Kh√¥ng tr·∫£ v·ªÅ ```json hay gi·∫£i th√≠ch ngo√†i JSON.',
    ].join('\n');

    const model = process.env.OPENAI_CONTRACT_MODEL || 'gpt-4.1-mini';

    const res = await this.client.responses.create({
      model,
      temperature: 0.2,
      input: [
        {
          role: 'user',
          content: [
            { type: 'input_text', text: prompt },
            // üëá Ch·ªâ d√πng cho PDF ƒë√£ upload
            { type: 'input_file', file_id: fileId },
          ],
        },
      ],
    });

    const text = this.extractText(res);
    try {
      const data = JSON.parse(text);
      data.safetyScoreA = this.clampScore(data.safetyScoreA);
      data.safetyScoreB = this.clampScore(data.safetyScoreB);
      if (!data.title) data.title = originalName ?? 'Untitled Contract';
      return data;
    } catch {
      this.logger.warn('AI kh√¥ng tr·∫£ JSON h·ª£p l·ªá, d√πng mock fallback.');
      return this.mockAnalysis(originalName);
    }
  }

  /**
   * Upload + ph√¢n t√≠ch + d·ªçn file t·∫°m
   */
  async uploadAndAnalyze(
    localPath: string,
    originalName: string,
    mimeType?: string,
  ) {
    let uploaded: { id: string };
    try {
      uploaded = await this.uploadToOpenAI(localPath, originalName, mimeType);
      const analysis = await this.analyzeUploadedContract(
        uploaded.id,
        originalName,
      );
      return { file: uploaded, analysis };
    } finally {
      this.safeUnlink(localPath);
    }
  }

  /* ---------- helpers ---------- */

  private extractText(res: any): string {
    if (res?.output_text && typeof res.output_text === 'string')
      return res.output_text;
    const legacy = res?.choices?.[0]?.message?.content;
    if (legacy && typeof legacy === 'string') return legacy;

    const chunks: string[] = [];
    if (Array.isArray(res?.output)) {
      for (const item of res.output) {
        if (Array.isArray(item?.content)) {
          for (const c of item.content) {
            if (typeof c?.text === 'string') chunks.push(c.text);
            if (typeof c?.content === 'string') chunks.push(c.content);
          }
        }
      }
    }
    return chunks.join('\n').trim();
  }

  private clampScore(n: any): number {
    const x = Number.isFinite(n) ? Number(n) : 0;
    return Math.max(0, Math.min(100, Math.round(x)));
  }

  private mockAnalysis(originalName?: string) {
    return {
      title: originalName ?? 'H·ª£p ƒë·ªìng m·∫´u',
      summary:
        'B·∫£n h·ª£p ƒë·ªìng c√≥ m·ª©c ƒë·ªô c√¢n b·∫±ng t∆∞∆°ng ƒë·ªëi nh∆∞ng thi·∫øu c√°c ƒëi·ªÅu kho·∫£n ph·∫°t v√† ch·∫•m d·ª©t r√µ r√†ng.',
      parties: { A: 'B√™n A (Ng∆∞·ªùi t·∫°o)', B: 'B√™n B (Ng∆∞·ªùi k√Ω)' },
      governingLaw: 'Kh√¥ng th·∫•y ƒë·ªÅ c·∫≠p r√µ',
      effectiveDate: 'Kh√¥ng th·∫•y ƒë·ªÅ c·∫≠p r√µ',
      term: 'Kh√¥ng th·∫•y ƒë·ªÅ c·∫≠p r√µ',
      paymentTerms:
        'C·∫ßn quy ƒë·ªãnh l·ªãch thanh to√°n, ph·∫°t ch·∫≠m, v√† ph∆∞∆°ng th·ª©c thanh to√°n.',
      obligationsA: [
        'Cung c·∫•p h√†ng ho√°/d·ªãch v·ª• ƒë√∫ng m√¥ t·∫£ v√† ti·∫øn ƒë·ªô.',
        'B·∫£o h√†nh theo cam k·∫øt.',
      ],
      obligationsB: ['Thanh to√°n ƒë√∫ng h·∫°n.', 'H·ª£p t√°c cung c·∫•p th√¥ng tin.'],
      risksA: [
        'Thi·∫øu ph·∫°t ch·∫≠m thanh to√°n.',
        'Ph·∫°m vi c√¥ng vi·ªác ch∆∞a ch·∫∑t ch·∫Ω.',
      ],
      risksB: [
        'Gi·ªõi h·∫°n tr√°ch nhi·ªám c√≥ th·ªÉ nghi√™ng v·ªÅ B√™n A.',
        'Thi·∫øu ƒëi·ªÅu kho·∫£n ho√†n tr·∫£ khi ch·∫≠m ti·∫øn ƒë·ªô.',
      ],
      keyClauses: [
        'Ph·∫°m vi c√¥ng vi·ªác',
        'Gi√° & thanh to√°n',
        'Ti·∫øn ƒë·ªô & nghi·ªám thu',
        'B·∫£o m·∫≠t',
        'Gi·ªõi h·∫°n tr√°ch nhi·ªám',
        'Gi·∫£i quy·∫øt tranh ch·∫•p',
      ],
      missingClauses: [
        'Ph·∫°t ch·∫≠m ti·∫øn ƒë·ªô/thanh to√°n',
        'Ch·∫•m d·ª©t s·ªõm & quy tr√¨nh b√†n giao',
      ],
      termination:
        'N√™n quy ƒë·ªãnh quy·ªÅn ch·∫•m d·ª©t, th·ªùi h·∫°n kh·∫Øc ph·ª•c v√† b·ªìi th∆∞·ªùng.',
      confidentiality: 'R√†ng bu·ªôc b·∫£o m·∫≠t trong v√† sau th·ªùi h·∫°n h·ª£p ƒë·ªìng.',
      disputeResolution:
        'Khuy·∫øn ngh·ªã: Th∆∞∆°ng l∆∞·ª£ng/H√≤a gi·∫£i -> Tr·ªçng t√†i/T√≤a √°n; n√™u n∆°i/lu·∫≠t √°p d·ª•ng.',
      safetyScoreA: 72,
      safetyScoreB: 68,
      redFlags: ['Thi·∫øu khung ph·∫°t', 'Ch∆∞a n√™u lu·∫≠t √°p d·ª•ng'],
      recommendations: [
        'B·ªï sung l·ªãch thanh to√°n & ph·∫°t ch·∫≠m.',
        'Ch·ªët ph·∫°m vi & ti√™u ch√≠ nghi·ªám thu.',
        'ƒê·∫∑t tr·∫ßn tr√°ch nhi·ªám & ngo·∫°i l·ªá.',
      ],
    };
  }

  private safeUnlink(p: string) {
    try {
      const base = path.basename(p);
      if (!base) return;
      fs.unlinkSync(p);
    } catch (e) {
      this.logger.debug(`Skip unlink ${p}: ${String(e)}`);
    }
  }
}
